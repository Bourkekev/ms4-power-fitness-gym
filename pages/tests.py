from django.test import TestCase
from django.urls import reverse, resolve
from . import views
from .forms import ContactUsForm


class SimpleTests(TestCase):
    def test_home_page_status_code(self):
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200)

    def test_home_page_url_resolves_home_page_view(self):
        # class-based views need to be compared by name, as the functions
        # generated by as_view() won't be equal
        view = resolve('/')
        self.assertEquals(
            view.func.__name__,
            views.HomePageView.as_view().__name__
            )

    def test_contact_page_status_code(self):
        response = self.client.get('/contact/')
        self.assertEqual(response.status_code, 200)

    def test_contact_page_uses_contact_form(self):
        response = self.client.get('/contact/')
        self.assertIsInstance(response.context['contact_form'], ContactUsForm)

    def test_contact_form_validation_for_blank_fields(self):
        form = ContactUsForm(data={
            'first_name': '',
            'last_name': '',
            'email': '',
            'subject': '',
            'your_message': '',
            })
        self.assertFalse(form.is_valid())
        self.assertEqual(
            form.errors['first_name'],
            ["This field is required."]
        )
        self.assertEqual(
            form.errors['last_name'],
            ["This field is required."]
        )
        self.assertEqual(
            form.errors['email'],
            ["This field is required."]
        )
        self.assertEqual(
            form.errors['subject'],
            ["This field is required."]
        )
        self.assertEqual(
            form.errors['your_message'],
            ["This field is required."]
        )

    def test_contact_form_validation_filled_fields(self):
        form = ContactUsForm(data={
            'first_name': 'John',
            'last_name': 'Doe',
            'email': 'email@example.com',
            'subject': 'Test contact form',
            'your_message': 'Test message here.',
            })
        self.assertTrue(form.is_valid())

    def test_gym_memberships_page_status_code(self):
        response = self.client.get('/gym-memberships/')
        self.assertEqual(response.status_code, 200)
